= Perlと全文検索エンジンGroongaでMySQLの\nデータを高速に全文検索する

# : subtitle
#    サブタイトル
: author
   堀本 泰弘
: institution
   株式会社クリアコード
: content-source
   YAPC::Kyoto 2023
: date
   2023-03-19
: allotted-time
   40m
: start-time
   2023-03-19T15:00+09:00
: end-time
   2023-03-19T15:40+09:00
: theme
   .


= 自己紹介

  # image
  # src = images/self-introduction.png
  # relative_height = 107

= 今日のテーマ

MySQLのデータを高速に全文検索する！

= よくあるアプローチ

1. InnoDBで全文検索

2. Elasticsearchで全文検索

3. Elasticsearch+Logstashで全文検索

= InnoDBで全文検索

InnoDB？

= InnoDBで全文検索

MySQLの\nデフォルトの\n汎用ストレージ\nエンジン

= InnoDBで全文検索\nメリット

* 手軽に全文検索できる😊
* 専用の構文を覚えなくていい😊
* メンテナンスコスト小😊

= InnoDBで全文検索\nデメリット

* 遅い😔
* 機能不足😔

= Elasticsearchで全文検索\n構成

  # image
  # src = images/mysql-elasticsearch-normal.png

= Elasticsearchで全文検索\nメリット

* 多機能😊
* SQLを使って全文検索できる😊

= Elasticsearchで全文検索\nデメリット

* アプリケーションの実装が複雑になる😔

  * 更新失敗時のケアが必要
  * Elasticsearchが起動していないと\nデータの更新ができない

= Elasticsearchで全文検索\nデメリット

  # image
  # src = images/mysql-elasticsearch-abnormality.png

= Elasticsearch+Logstash\nで全文検索\n構成

  # image
  # src = images/mysql-logstash-elasticsearch.png

= Elasticsearch+Logstash\nで全文検索\nメリット

* アプリケーションの実装をシンプルにしつつElasticsearchを使える😊

= Elasticsearch+Logstash\nで全文検索\nデメリット

* メンテナンスコスト：大😔

  * Logstashの死活監視が必要

= Elasticsearch+Logstash\nで全文検索\nデメリット

* データを削除するのに一手間必要😔

  * logstashはレコードの削除を検出\nできない
  * deleteフラグを作って別途削除が必要

= 新たなアプローチ！

MySQL + groonga-delta + Groongaで\n全文検索

= MySQL+\ngroonga-delta+Groongaで\n全文検索：構成

  # image
  # src = images/mysql-groonga-delta-groonga.png

= MySQL+\ngroonga-delta+Groongaで\n全文検索：メリット

* 速い😊
* 多機能😊
* アプリケーションの変更：小😊
* メンテナンスコスト：そこそこ😊

= MySQL+\ngroonga-delta+Groongaで\n全文検索：デメリット

* InnoDBを使う方法よりはメンテナンスコストが大きくなる😔
* Groonga用のクエリーを使う必要がある（既存のSQLが使えない）😔

= ところで

Groonga？

= Groongaとは？

オープンソースの国産全文検索\nエンジン

= Groongaとは？

* 公式ドキュメント

  https://groonga.org/ja/

= Groongaの特徴

* 速い
* 登録した情報は即時検索可能
* 更新中でも検索性能が落ちない
* 多機能（同義語、ハイライト、オートコンプリート、etc...）

= groonga-deltaとは？

groonga-delta？

= groonga-deltaとは？

MySQLのデータをリアルタイムでGroongaに同期するツール

= できること

* データの一括取り込み
* INSERT/UPDATE/DELETEの結果をリアルタイムで取り込む

= MySQL+groonga-delta+Groongaの構成

  # image
  # src = images/groonga-delta-degin.png
  # relative_height = 80

= MySQL+groonga-delta+Groongaの構成

* マスターデータはMySQLで管理し、全文検索をGroongaで行う

= MySQL+groonga-delta+Groongaのメリット

* MySQLのデータだけケアすればいい

  MySQLのデータを更新するだけでいい

= MySQL+groonga-delta+Groongaのメリット

* マスターデータはMySQLが持っている

  GroongaのDBが破損したら、切り捨てて、新規に作り直すことができる

= MySQL+groonga-delta+Groongaのメリット

がんばって復旧しなくていい！

= MySQL+groonga-delta+Groongaのメリット

アプリケーションをシンプルにできる！

= MySQL+groonga-delta+Groongaのメリット

* Groongaが起動していなくてもデータの更新ができる

  Groonga復旧後に再接続すると自動的にデータが同期される

= MySQL+groonga-delta+Groongaのメリット

サービスを停止しなくていい！

= perlアプリケーションとGroongaの接続

Groonga-HTTPを使う

= Groonga-HTTPとは？

Groonga-HTTP？

= Groonga-HTTPとは？

GroongaのHTTPクライアントライブラリー

= Groonga-HTTPとは？

* GroongaとHTTPでやり取りできる

= Groonga-HTTPの仕組み

  # image
  # src = images/Groonga-HTTP-degin.png
  # relative_height = 60

= Mroongaとの違い

MySQLのストレージエンジンとしてGroongaを使える

= Mroongaのメリット

* SQLが使える
* 使うまでの設定がない（パッケージをインストールして終わり）

= Mroongaのデメリット

* MySQL+Groongaに比べて遅い
* Groongaの一部の機能を使えない
* クラッシュセーフではない

= ユースケース

* データ量が少ない
* それほど速度を求めていない
* 気軽に全文検索したい

= ユースケース

InnoDB

= ユースケース

* 気軽に高速な全文検索を使いたい場合

= ユースケース

Mroonga

= ユースケース

* とにかく速度がほしい
* ファセット検索などGroongaにしかない機能を使いたい

= ユースケース

MySQL + groonga-delta + Groonga

== Groongaについての情報

リリース自慢会
https://www.youtube.com/playlist?list=PLLwHraQ4jf7PnA3GjI9v90DZq8ikLk0iN

== Groongaについての情報

グルカイ！（Groonga開発者に聞け！）
https://www.youtube.com/playlist?list=PLLwHraQ4jf7PBol9aq5BoaM2Hnk6aCKs2

== サポート

MySQL + Groongaは敷居が高いが使いたい

== サポート

クリアコードのサポートサービス

https://www.clear-code.com/services/groonga.html

== サポート

チャット

https://gitter.im/groonga/ja

== サポート

GitHub Discussions

https://github.com/groonga/groonga/discussions
