= Perlと全文検索エンジンGroongaでMySQLの\nデータを高速に全文検索する

# : subtitle
#    サブタイトル
: author
   堀本 泰弘
: institution
   株式会社クリアコード
: content-source
   YAPC::Kyoto 2023
: date
   2023-03-19
: allotted-time
   40m
: start-time
   2023-03-19T15:00+09:00
: end-time
   2023-03-19T15:40+09:00
: theme
   .

= 自己紹介

  # image
  # src = images/self-introduction.png
  # relative_height = 107

= 今日のテーマ

MySQLのデータを((*高速*))に全文検索する！

= よくあるアプローチ

* InnoDBで全文検索
* Elasticsearchで全文検索
* Elasticsearch+Logstashで\n全文検索

= InnoDBで全文検索

= InnoDBで全文検索\nメリット

* 手軽に全文検索できる😊
* 専用の構文を覚えなくていい😊
* メンテナンスコスト：小😊

= InnoDBで全文検索\nデメリット

* 遅い😔
* 機能不足😔

= 使い方

  # coderay sql

    CREATE TABLE products (
      product_id int DEFAULT NULL,
      product_title text,
      product_description text,
      product_brand text,
      FULLTEXT KEY fts_description_idx
        (product_title, product_description, product_brand) WITH PARSER ngram
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


= 使い方

  # coderay sql

    SELECT * FROM products
     WHERE MATCH(product_title, product_description, product_brand)
           AGAINST('+ハンドバッグ' IN BOOLEAN MODE');

= 使い方

* IN BOOLEAN MODE

  * 検索文字列の先頭の特定の文字が特別な意味を持つ

    * +:AND検索
    * -:NOT検索
    * 演算子なし：OR検索

= Elasticsearchで全文検索

= Elasticsearchで全文検索\n構成

  # image
  # src = images/mysql-elasticsearch-normal.png
  # relative_height = 60

= Elasticsearchで全文検索\nメリット

* InnoDBより速い😊
* 多機能😊

= Elasticsearchで全文検索\nデメリット

* アプリケーションの実装が複雑になる😔

  * 更新失敗時のケアが必要

= Elasticsearchで全文検索\nデメリット

  # image
  # src = images/mysql-elasticsearch-abnormality.png
  # relative_height = 60

= Elasticsearch+Logstashで\n全文検索

= Logstashとは?

= Logstashとは?

Elastic社開発のログ収集ツール

= Logstashとは?

データソースを\n一元化して収集\nできる

= Elasticsearch+Logstash\nで全文検索\n構成

  # image
  # src = images/mysql-logstash-elasticsearch.png
  # relative_height = 60

= Elasticsearch+Logstash\nで全文検索\nメリット

* アプリケーションの実装を\nシンプルにできる😊

= Elasticsearch+Logstash\nで全文検索\nデメリット

* メンテナンスコスト：大😔

  * Logstashの死活監視も必要

= Elasticsearch+Logstash\nで全文検索\nデメリット

* データを削除するのに一手間必要😔

  * Logstashはレコードの削除を検出\nできない
  * deleteフラグを作って別途削除が必要

= 新しいアプローチ！

= MySQL + ((*Groonga delta*)) + ((*Groonga*)) + ((*Groonga-HTTP*))

= 構成

  # image
  # src = images/mysql-groonga-delta-groonga-groonga-http.png
  # relative_height = 90

= Groongaとは？

= Groongaとは？

  # image
  # src = images/mysql-groonga-delta-groonga-groonga-http.png
  # relative_height = 90

= Groongaとは？

オープンソースの国産全文検索\nエンジン

= Groongaとは？

* 公式ドキュメント

  https://groonga.org/ja/

= Groongaの特徴

* ((*高速*))
* 登録した情報は即時検索可能
* 更新中でも検索性能が落ちない
* ((*多機能*))（同義語、ハイライト、オートコンプリート、etc...）
* ((*HTTPでやり取りできる*))

= Groonga-HTTPとは？

= Groonga-HTTPとは？

  # image
  # src = images/mysql-groonga-delta-groonga-groonga-http.png
  # relative_height = 90

= Groonga-HTTPとは？

GroongaのHTTPクライアント\nライブラリー

= Groonga-HTTPを使わない場合

  # RT
  caption = Site

  id, _key, title
  1, http://example.org/, Example.org
  2, http://example.net/, Example.net

= Groonga-HTTPを使わない場合

  # coderay perl

  use LWP::UserAgent;
  use JSON;

  $ua = LWP::UserAgent->new;
  $ua->agent("MyApplication/1.0 ");

  my $res = $ua->get('http://127.0.0.1:10041/d/select?table=Site');
  if ($res->is_success) {
    my @decoded_contents = decode_json($res->content);
    my $n_hits = $decoded_contents[0][1][0][0][0];

    for (my $i = 2; $i < $n_hits+2; $i++) {
      print "\n";
      print "id=$decoded_contents[0][1][0][$i][0]\n";
      print "_key=$decoded_contents[0][1][0][$i][1]\n";
      print "title=$decoded_contents[0][1][0][$i][2]\n";
    }
  }

= Groonga-HTTPを使わない場合

  # coderay json

  id=1
  _key=http://example.org/
  title=Example.org

  id=2
  _key=http://example.net/
  title=Example.net

= Groonga-HTTPを使う場合

インストール

  # coderay shell

    % cpanm Groonga::HTTP

= Groonga-HTTPを使う場合

  # coderay perl

  use Groonga::HTTP;

  my $groonga = Groonga::HTTP->new;
  my $result = $groonga->select(table => 'Site');

  for (my $i = 0; $i < $result->{'n_hits'}; $i++) {
    print "\n";
    print "$result->{'records'}[$i]->{'_id'}\n";
    print "$result->{'records'}[$i]->{'_key'}\n";
    print "$result->{'records'}[$i]->{'title'}\n";
  }

= Groonga-HTTPを使う場合

  # coderay perl

  1
  http://example.org/
  Example.org

  2
  http://example.net/
  Example.net

= Groonga-HTTPの情報

公式ドキュメント

  * https://groonga.github.io/Groonga-HTTP/ja/

= Groonga deltaとは？

= Groonga deltaとは？

MySQLのデータをリアルタイムでGroongaに同期するツール

= Groonga deltaとは？

  # image
  # src = images/mysql-groonga-delta-groonga-groonga-http.png
  # relative_height = 90

= MySQLの\nレプリケーションモデル

  # image
  # src = images/mysql-replication.png

= できること

* データの一括取り込み
* INSERT/UPDATE/DELETEの結果をリアルタイムで取り込む

= MySQL+Groonga delta+Groongaの構成

  # image
  # src = images/mysql-groonga-delta-groonga-groonga-http.png
  # relative_height = 90

= MySQL+Groonga delta+Groongaの構成

データ更新は((*MySQL*))\n全文検索は((*Groonga*))

= MySQL+Groonga delta+Groongaなら！

* 速い😊
* 多機能😊
* アプリケーションをシンプル\nにできる！

= MySQL+Groonga delta+Groongaなら！

* マスターデータはMySQL

  GroongaのDBが破損したら、\n切り捨てて新規に作り直すこと\nができる

= MySQL+Groonga delta+Groongaなら！

MySQLのデータだけケアすれば\nいい！

= MySQL+Groonga delta+Groongaなら！

* Groongaが起動していなくてもデータの更新ができる

  Groonga復旧後に再接続すると自動的にデータが同期される

= MySQL+Groonga delta+Groongaなら！

Groongaに障害が起きても更新をケアしなくて\nいい！

= MySQL+Groonga delta+Groongaなら！

* データの削除もできる😊

= MySQL+Groonga delta+Groongaなら！

* 専用の構文が必要😔
* メンテナンスコスト：大😔

= 他にもこんな方法が

= Mroongaを使う

= Mroongaとは？

MySQLの\nストレージ\nエンジンとして\nGroongaを\n使える

= Mroongaのメリット

* SQLが使える😊
* 使うまでの設定がない\n（パッケージをインストールして終わり）😊

= Mroongaのデメリット

* Groongaに比べて遅い😔
* SQLを逸脱するような機能は使えない😔
* クラッシュセーフではない😔

= ユースケース

どの方法が\nどういうケースで有効か？

= ユースケース

* データ量が少ないケース
* あまり速度を求めていないケース
* 気軽に全文検索したいケース

= ユースケース

InnoDB

= ユースケース

* 気軽に高速な全文検索を使いたいケース
* データリカバリーの方法が確立できている

= ユースケース

Mroonga

= ユースケース

* とにかく速度がほしいケース
* ファセット検索などGroongaにしかない機能を使いたいケース

= ユースケース

MySQL + Groonga delta + Groonga

= まとめ

  # RT
  caption = ユースケース

  /, InnoDB, Mroonga, Groonga
  データ量大, ☓, ○, ◎
  速度, ☓, ○, ◎
  機能, ☓, ○, ◎
  運用, ◎, △, ☓

= サポート

GroongaやMroongaは\n敷居が高いが\n使いたい!

= サポート

そんなときは

= サポート

* チャット

  https://gitter.im/groonga/ja

= サポート

* GitHub Discussions

  https://github.com/groonga/groonga/discussions

= サポート

* クリアコードのサポートサービス

  https://www.clear-code.com/services/groonga.html

= Groongaについての情報

* リリース自慢会

  https://www.youtube.com/playlist?list=PLLwHraQ4jf7PnA3GjI9v90DZq8ikLk0iN

= Groongaについての情報

* グルカイ！\n（Groonga開発者に聞け！）

  https://www.youtube.com/playlist?list=PLLwHraQ4jf7PBol9aq5BoaM2Hnk6aCKs2

= ご清聴ありがとうございました！
